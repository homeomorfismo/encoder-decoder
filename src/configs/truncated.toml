[mesh]
maxh = 0.05

[data_gen]
tol = 1e-10
iterations = 50
is_complex = false
n_samples = 6_000
use_restricted_operator = false

[model]
compression_factor = 3
seed = 42
init_encoder_type = "glorot_uniform"
init_decoder_type = "glorot_uniform"

[model.init_encoder_kwargs]
# Here we can specify the kwargs for the encoder initialization
# value = 1.0

[model.init_decoder_kwargs]
# Here we can specify the kwargs for the decoder initialization
# value = 0.0

[optimization]
optimizer_type = "adam"
ord = 1
reg = 0.001

[optimization.optimizer_kwargs]
# Here we can specify the kwargs for the optimizer
learning_rate = 0.005

[training]
n_epochs = 500
batch_size = 50
freq = 10

[solver]
solver_tol = 1e-10
solver_max_iter = 10_000

[smoother]
smoother_tol = 1e-10
smoother_max_iter = 50

[coarsening]
# "dec-dec", "dec-enc", "enc-enc", "enc-dec"
coarsening_type = "enc-enc"
use_restricted_operator = true
regularization = 0.0001

[aggregation]
# "symmetric", "classical", "energy_based", "algebraic", "affinity"
strength_type = "algebraic"
# "standard", "naive", "lloyd", "balanced_lloyd"
aggregation_type = "balanced_lloyd"

[aggregation.strength_kwargs]
# Here we can specify the kwargs for the strength matrix computation
alpha = 0.05
R = 50
k = 2
epsilon = 10.0

[aggregation.aggregation_kwargs]
# Here we can specify the kwargs for the aggregation
num_clusters = 300

[output]
save_weights = false
plot_weights = true
strict_assert = true
use_progress_bar = false
